%Generating 4.5D curve with MATLAB and JULIA

%% Step 1: Generate Data
addpath(genpath('./Utility/'));

numPts = 300;
[rMat,T, K, EGT,DPointsOnImage, p1ImageOnImage, p2ImageOnImage] = generateRandomCameraAndPoints(numPts, 0, 0, 10);

expPoints = 5;
P1 = p1ImageOnImage(:,1:expPoints);
P2 = p2ImageOnImage(:,1:expPoints);

pgt(:,:,1) = P1';
pgt(:,:,2) = P2';

[str_gt, ~] = generateDataFor45Dcurve(P1,P2,K);


%% Step 2: Copy str_gt to Julia, replacing "real_data" and "K" line (line 30 and line 32) then run curve65D.jl for generating curve files


%Julia Part: Run curve45D.jl


%% Step 3: Read the curve file generated by Julia and draw the curve
fid = fopen('/home/hongyi/Documents/julia-1.4.2/bin/E_curve.txt','r');
intersect_point = {};
tline = fgetl(fid);
%intersect_point{1} = str2num(tline(5:end-1));
counter = 1;
while ischar(tline)
    counter
    disp(tline)
    intersect_point{counter} = str2num(tline(5:end-1));
    tline = fgetl(fid);
    counter = counter + 1;
end
fclose(fid);

%Recover the point when Column is scaned;
curve_points = [];
for i = 1:length(intersect_point)
    points = intersect_point{i};
    ref_p = inv(K) * [i;0;1];
    for j = 1:length(points)
        target_p = K * [ref_p(1);points(j);1];
        curve_points = [curve_points target_p];
    end
end

figure;
imshow(I2); hold on;
plot(P2(1,1:4),P2(2,1:4),'g.','MarkerSize',30); hold on
plot(P2(1,5),P2(2,5),'r.','MarkerSize',30); hold on
plot(curve_points(1,:),curve_points(2,:),'r.'); hold on
xlim([0,640]);
ylim([0,480]);
set(findall(gcf,'-property','FontSize'),'FontSize',25)